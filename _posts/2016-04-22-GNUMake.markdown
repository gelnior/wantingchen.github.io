---
layout: post
title:  "La petite instruction de GNU Make"
comments: true
analytics : true
category: Programmation
tags: C, Make
---

Bien que je préfère utilser cmake[^1] pour compiler mon programme, 
mais c'est encore important de comprendre le principale de GNU Make.

### L'objectif de GNU Make ###
L'objectif de GNU make est __déterminer automatiquement quelle pièces d'un grand programme doit être récompilées,
et spécifier les commandements pour les récompiler__.
Le format est comme ça:
{% highlight Makefile %}
foo: foo.c                      # Le premier foo est le cible, et foo.c est la condition préalable.
        gcc -o foo foo.c        # La recette, devant gcc est une caractère de tabulation.
{% endhighlight %}
Le cible peut être un fichier exécutable, un fichier objet, ou un label.
La condition préalable et les fichiers/dossiers nécéssaires pour compiler le cible.
La recette est les commandements pour compiler et lier le cible.

Les règles du jeu sont:
- On compile tous les codes source afin de créer le fichier de cible lorsque ça n'existe pas.

- On renouvele le fichier de cible lorsque les fichers indiqués pas la condition préalable sont plus nouveaux que le cible.
On doit seulement récompiler les codes source actualisés et alors rélier au fichier de cible.

- Si les fichiers header sont modifiés, il faut récompiler les codes source qui les comportent et alors rélier au fichier de cible.

### Le réglage de variables ###
Il y a quatre façons pour créer ou modifier des variables.
- **VAR = VAL** : VAR devient VAL lorsque VAL est un constante; si VAL est un autre variable, VAR change aussi bien que VAL change. Par exemple:
{% highlight Makefile %}
VAR1 = un
VAR2 = $(VAR1)
$(warning $(VAR2))              # obtenira un

VAR1 = deux
$(warning $(VAR2))              $ obtenira deux
{% endhighlight %}

- **VAR := VAL** : VAR devient VAL lorsque VAL est un constante; si VAL est un autre variable, VAR ne change pas si VAL change,
c'est-á-dire que la valeur de VAR n'est pas lièe avec $(VAL).
{% highlight Makefile %}
VAR1 = un
VAR2 := $(VAR1)                 # on change seulement ici
$(warning $(VAR2))              # obtenira un

VAR1 = deux
$(warning $(VAR2))              $ obtenira un encore
{% endhighlight %}

- **VAR ?= VAL** : VAR devient VAL lorsque VAR n'est pas encore défini, sinon VAR ne change pas.

- **VAR += VAL** : on ajoute VAL à VAR.
{% highlight Makefile %}
VAR1 = un
$(warning $(VAR2))              # obtenira un

VAR1 += deux
$(warning $(VAR1))              $ obtenira un deux
{% endhighlight %}


Il y a aussi plusieurs variables encastré utiles:

- **$@** : Le nom de cible

- **$^** : tous les fichiers/dossiers dans la condition préalable

- **$<** : Première fichiers/dossiers dans la condition préalable

- **$?** : tous les fichiers/dossiers dans la condition préalable qui sont réactualisés

### Les fonction encastrées utiles ###
Ces fonction encastrées sont souvent utilisées :
- Montrer les message :
  + **$(warning <Message>)** : Montrer le message d'avertissement avec le nombre de ligne correspondante.
  + **$(error <Message>)** : Affirmer le message d'erreur avec le nombre de ligne correspondante, et puis terminer l'action de make.

- Traitement de chaînes de caractères :
  + **$(subst <<from>>,<<to>>,<<text<>)** : si on trouve <<from>> dans <<text>>, <<from>> sera replacé par <<to>>.
  + **$(patsubst <<pattern>>,<<replacement>>,<<text>>)** : Pour toutes les chaînes de caractères dans <<text>>,
s'il y a quelconque avec la forme définie comme <<pattern>>,
il deviendra la forme définie comme <<replacement>> 
(par exemple : %.c, %.o, foo.c ->  "foo.c" a la forme comme %.c, donc il deviendra "foo.o").

- **$(shell <<commandement>>)** : Commandement de shell, exécuter le <<commandement>> et montrer le résultat.

### .PHONY ###

On défine les cible avec **.PHONY** lorsque ils n'ont pas de condition préalable.
Par exemple, **make clean** ou **make install**.
{% highlight Makefile %}
.PHONY: clean install
{% endhighlight %}

### Référence ###

- [CMake](https://cmake.org/)

- [makefile教學(一)](http://jeff71321.pixnet.net/blog/post/92143030-makefile%E6%95%99%E5%AD%B8%28%E4%B8%80%29)

- [GNU Make, Autotools, CMake 簡介](http://fr.slideshare.net/zzz00072/gnu-make-autotools-cmake)

- [跟我一起寫Makefile:使用函數](http://wiki.ubuntu.org.cn/index.php?title=%E8%B7%9F%E6%88%91%E4%B8%80%E8%B5%B7%E5%86%99Makefile:%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0&variant=zh-tw)

